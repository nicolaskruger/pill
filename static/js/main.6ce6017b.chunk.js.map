{"version":3,"sources":["types/pill.ts","reducer/index.ts","hook/command/command.hook.ts","reducer/actions/add.action.ts","reducer/actions/eat.action.ts","reducer/reducer.ts","hook/pill/pill.hook.ts","ui/components/pill/pill.component.tsx","ui/components/input/input.component.tsx","ui/components/box_pill/box-pill.component.tsx","ui/components/description/description.component.tsx","ui/screen/drop/drogs.screen.tsx","App.tsx","index.tsx"],"names":["Color","ActionTypes","RED","BLUE","enumColorValue","add","state","action","length","pills","pill","Error","eat","index","currPill","slice","reducer","ADD","EAT","type","defaultState","PillCompoent","props","color","className","Input","onChange","event","target","value","BoxPill","map","Description","Drogs","useState","command","setCommand","useReducer","dispatch","usePill","run","eatRegex","addRegex","oper","regex","regexMath","match","replace","toResponse","parseInt","red_pill","efect","blue_pill","find","reg","test","useCommand","onSubmit","preventDefault","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ce6017b.chunk.js","sourcesContent":["\n\nenum Color {\n    RED,\n    BLUE\n}\n\nconst { RED, BLUE } = Color;\n\ntype EnumColorValue = EnumDictionary<Color, string>;\n\nconst enumColorValue: EnumColorValue = {\n    [RED]: \"red\",\n    [BLUE]: \"blue\"\n}\n\ntype Pill = {\n    color: Color,\n    efect: String\n}\n\ntype EnumDictionary<T extends string | symbol | number, U> = {\n    [K in T]: U;\n};\n\nexport type { Pill, EnumDictionary }\nexport { enumColorValue, Color }","import { EnumDictionary, Pill } from \"../types\";\n\nenum ActionTypes {\n    ADD,\n    EAT\n}\n\ntype State = {\n    currPill: Pill | null;\n    pills: Pill[]\n}\ntype Action = {\n    type: ActionTypes\n    pill?: Pill,\n    index?: number\n}\n\n\n\ntype Oper = EnumDictionary<ActionTypes, (state: State, action: Action) => State>;\n\nexport type { State, Action, Oper }\nexport { ActionTypes }\nexport * from \"./reducer\";","import { Color, Pill } from \"../../types\";\n\ntype Add = (pill: Pill) => void;\ntype Eat = (index: number) => void;\n\ntype RegexOper = {\n    regex: RegExp;\n    oper: (command: string) => void\n}\n\nconst { RED, BLUE } = Color;\n\n\nconst useCommand = (add: Add, eat: Eat) => {\n\n    const eatRegex = /^eat /;\n\n    const addRegex = /^add /;\n\n    const oper = (command: string, regex: RegExp, regexMath: RegExp) => {\n        const match = command.replace(regex, \"\")\n            .match(regexMath);\n\n        if (match === null) {\n            throw new Error(\"invalid command\");\n        }\n        return match;\n    }\n\n    const eatOper = (command: string) => {\n\n        const match = oper(command, eatRegex, /\\d+/);\n\n        const toResponse = parseInt(match[0]);\n\n        eat(toResponse);\n    }\n\n    const addOper = (command: string) => {\n\n        const match = oper(command, addRegex, /\\w+/);\n\n        const red_pill: Pill = {\n            color: RED,\n            efect: \"hungri\"\n        }\n\n        const blue_pill: Pill = {\n            color: BLUE,\n            efect: \"disie\"\n        }\n\n        const pills = {\n            red_pill: red_pill,\n            blue_pill: blue_pill\n        }\n\n        const str = match[0] as keyof typeof pills;\n\n        const toResponse: Pill = pills[str] || null;\n\n\n        if (toResponse === null) {\n            throw new Error(\"invalid command\")\n        }\n\n        add(toResponse);\n    }\n\n    const regex: RegexOper[] = [\n        { regex: eatRegex, oper: eatOper },\n        { regex: addRegex, oper: addOper }\n    ]\n\n    const run = (command: string) => {\n        const oper = regex.find(reg => reg.regex.test(command)) || null;\n        if (oper === null) {\n            throw new Error(\"invalid command\");\n        }\n        oper.oper(command);\n    }\n\n    return run;\n}\n\nexport { useCommand }","import { Action, State } from \"..\";\nimport { Pill } from \"../../types\";\n\nconst maxLength = 7;\n\nconst add = (state: State, action: Action): State => {\n\n    const { length } = state.pills;\n\n    const pill = action.pill as Pill\n\n    if (length >= maxLength) {\n        throw new Error(\"you have reach the max length\")\n    }\n\n    return ({\n        ...state,\n        pills: [pill, ...state.pills]\n    })\n\n}\n\nexport { add }","import { Action, State } from \"..\";\n\nconst eat = (state: State, action: Action): State => {\n    const index = action.index as number;\n    const { length } = state.pills;\n    const { pills } = state;\n\n    if (index < 0 || index >= length) {\n        throw new Error(\"index out of range of pills\");\n    }\n\n    return {\n        ...state,\n        currPill: state.pills[index],\n        pills: [...pills.slice(0, index), ...pills.slice(index + 1, pills.length)]\n    }\n}\n\nexport { eat }","import { Action, ActionTypes, Oper, State } from \".\";\nimport { add, eat } from \"./actions\";\n\n\n\nconst reducer = (state: State, action: Action): State => {\n    const { ADD, EAT } = ActionTypes;\n\n\n    const oper: Oper = {\n        [ADD]: add,\n        [EAT]: eat\n    }\n\n    return oper[action.type](state, action);\n}\n\nexport { reducer }","import { useReducer } from \"react\";\nimport { Action, ActionTypes, reducer, State } from \"../../reducer\";\nimport { Pill } from \"../../types\";\n\nconst defaultState: State = {\n    currPill: null,\n    pills: []\n}\n\nconst usePill = () => {\n    const [state, dispatch] = useReducer(reducer, defaultState);\n\n    const { ADD, EAT } = ActionTypes;\n\n    const add = (pill: Pill) => {\n        const action: Action = {\n            type: ADD,\n            pill: pill\n        }\n        dispatch(action);\n    }\n\n    const eat = (index: number) => {\n        const action: Action = {\n            type: EAT,\n            index: index\n        }\n        dispatch(action);\n    }\n\n    return {\n        state,\n        eat,\n        add\n    }\n\n}\n\nexport { usePill };","import { enumColorValue, Pill } from \"../../../types\";\n\nimport \"./pill.styles.css\"\n\ntype PropsPill = {\n    pill: Pill;\n}\n\nconst PillCompoent = (props: PropsPill) => {\n    const { pill } = props;\n\n    const color = enumColorValue[pill.color];\n\n    return (\n        <div className={`Pill Pill-${color}`}>\n            <div className=\"Pill-l\">\n\n            </div>\n            <div className=\"Pill-d\">\n\n            </div>\n        </div>\n    )\n\n}\n\nexport { PillCompoent }","import { InputHTMLAttributes } from \"react\";\n\ninterface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n    onChange: (val: any) => void\n};\n\nconst Input = (props: InputProps) => {\n\n\n    const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        props.onChange(event.target.value);\n    }\n\n    return (\n        <input {...props} onChange={onChange} />\n    );\n}\n\nexport { Input }","import { Pill } from \"../../../types\"\nimport { PillCompoent } from \"../pill/pill.component\";\n\nimport \"./box-pill.css\"\n\ntype Props = {\n    pills: Pill[]\n}\n\nconst BoxPill = (props: Props) => {\n\n    const { pills } = props;\n\n    return (\n        <div className=\"BoxPill\">\n            {pills.map(pill => (\n                <PillCompoent pill={pill} />\n            ))}\n        </div>\n    )\n}\n\nexport { BoxPill }","import \"./description.css\"\n\n\nconst Description = () => (\n    <ul className=\"description\">\n        <li>\n            <p className=\"description__p-info\">\n                pill:\n            </p>\n            <p className=\"description__p-red-pill\">\n                red_pill\n            </p>\n            <p>\n                or\n            </p>\n            <p className=\"description__p-blue-pill\">\n                blue_pill\n            </p>\n        </li>\n        <li>\n            <p className=\"description__p-command\">\n                add\n            </p>\n            <p>\n                pill\n            </p>\n        </li>\n        <li>\n            <p className=\"description__p-command\">\n                eat\n            </p>\n            <p>\n                index\n            </p>\n        </li>\n    </ul>\n)\n\nexport { Description }","import { useState } from \"react\";\nimport { useCommand, usePill } from \"../../../hook\";\nimport { Color, enumColorValue } from \"../../../types\";\nimport { BoxPill, Description, Input } from \"../../components\"\nimport \"./drogs.css\"\nconst Drogs = () => {\n\n\n    const [command, setCommand] = useState(\"\");\n\n\n    const { state, add, eat } = usePill();\n\n\n    const color = enumColorValue[state.currPill?.color as Color] || \"\";\n\n\n    const run = useCommand(add, eat);\n\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n        event.preventDefault()\n        try {\n            run(command);\n            setCommand(\"\")\n        }\n        catch {\n\n        }\n    }\n\n    return (\n        <div className=\"drogs\">\n            <div className=\"drogs__div\">\n                <BoxPill pills={state.pills} />\n                <Description />\n            </div>\n            <form action=\"\" onSubmit={handleSubmit}>\n                <Input className={`input drogs__input-${color} `} value={command} onChange={setCommand} />\n            </form>\n        </div>\n    )\n\n}\n\nexport { Drogs };","import React from 'react';\nimport './App.css';\nimport { Drogs } from './ui/screen';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Drogs />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}